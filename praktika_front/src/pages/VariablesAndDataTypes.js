import React from 'react';
import '../styles/Lesson-style.css';
import ScrollToTopButton from '../components/ScrollTopButton';
import Quiz from '../components/Quiz'

const VariablesAndDataTypes = () => {
  const quest = [
    {
      question: "Какой тип данных используется для хранения текста в Python?",
      options: ["int", "str", "list", "dict"],
      answer: "str"
    },
    {
      question: "Какой оператор используется для присваивания значений переменным?",
      options: ["=", "==", "===", "=>"],
      answer: "="
    },
    {
      question: "Какой из этих методов используется для добавления элемента в конец списка?",
      options: [".append()", ".add()", ".insert()", ".push()"],
      answer: ".append()"
    }
  ];

  return (
    <div className="lesson-container">
      <div className="lesson-header">
        <h1>Переменные и типы данных</h1>
      </div>
      <div className="lesson-section">
        <h2>Переменные и присваивание</h2>
        <p>
          Переменные в программировании используются для хранения данных, которые могут изменяться во время выполнения программы. 
          В Python переменные создаются просто путем присваивания значения с помощью оператора <code>=</code>. Например, можно 
          создать переменную <code>age</code> и присвоить ей значение 25.
        </p>
        <pre>
          <code>
            {`age = 25\n`}
            {`name = "Alice"\n`}
            {`temperature = 36.6\n`}
          </code>
        </pre>
        <p>
          В этом примере созданы три переменные: <code>age</code> (целое число), <code>name</code> (строка) и <code>temperature</code> (вещественное число). Переменные позволяют хранить данные и использовать их в программе.
        </p> 
      </div>

      <div className="lesson-section">
        <h2>Введение в типы данных</h2>
        <p>
          В программировании типы данных играют ключевую роль, потому что они определяют, какие виды значений могут быть использованы 
          в программе и как программы могут работать с этими значениями. В Python есть несколько основных типов данных, которые будут 
          рассмотрены сегодня.
        </p>
      </div>

      <div className="lesson-section">
        <h2>Целочисленные типы данных (<code>int</code>)</h2>
        <p>
          Целочисленные данные в Python представляют собой обычные числа без дробной части. Они могут быть как положительными, так и 
          отрицательными числами. Например, если нужно хранить возраст человека или количество каких-то предметов в программе, 
          целочисленные типы данных подойдут для этого.
        </p>
        <pre>
          <code>
            {`# Пример использования целочисленного типа данных\n`}
            {`age = 25\n`}
            {`count_of_books = 100\n`}
            {`temperature_celsius = -5\n`}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Вещественные типы данных (<code>float</code>)</h2>
        <p>
          Вещественные числа в Python представляют собой числа с дробной частью. Они используются, когда нужна более точная 
          запись чисел, которые могут иметь дробную часть, например, рост, вес или результаты математических вычислений.
        </p>
        <pre>
          <code>
            {`# Пример использования вещественного типа данных`}
            {`weight = 68.5\n`}
            {`height = 1.75\n`}
            {`pi = 3.14159\n`}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Строковые типы данных (<code>str</code>)</h2>
        <p>
          Строковые данные в Python представляют собой последовательность символов, заключенных в кавычки (одинарные или двойные). 
          Эти типы данных используются для хранения текста и любой другой символьной информации, с которой нужно работать в программе.
        </p>
        <pre>
          <code>
            {`# Пример использования строкового типа данных\n`}
            {`greeting = "Hello, world!"\n`}
            {`name = "Alice"\n`}
            {`message = 'Python is fun!'\n`}
          </code>
        </pre>
        <p>
          Для включения в строки конструкций, которые могут быть интерпретированы как часть синтаксиса, используется экранирование.
          В Python символом экранирования является обратный слеш (<code>\</code>).
          Например:
        </p>
        <pre>
          <code>
            {`# Включение одинарной кавычки в строку\n`}
            {`quote = 'It\\'s a sunny day'\n`}
            {`print(quote)  # Вывод: It's a sunny day\n\n`}
            
            {`# Включение двойной кавычки в строку\n`}
            {`quote = "He said, \\"Hello, world!\\""\n`}
            {`print(quote)  # Вывод: He said, "Hello, world!"\n`}
          </code>
        </pre>
        <p>Команда <code>print</code> выводит на экран то, что указано в скобках.</p>
        <p>Включение обратного слэша:</p>
        <pre>
          <code>
            {'# Включение обратного слэша в строку\n'}
            {'path = "C:\\\\Users\\\\Alice\\\\Documents"\n'}
            {'print(path)  # Вывод: C:\\Users\\Alice\\Documents\n'}
          </code>
        </pre>
        
        <p>Специальные символы:</p>
        <pre>
          <code>
            {'# Включение новой строки и табуляции\n'}
            {'multi_line = "First line\\nSecond line\\n\\tIndented line"\n'}
            {'print(multi_line)\n'}
            {'# Вывод:\n'}
            {'# First line\n'}
            {'# Second line\n'}
            {'#     Indented line\n'}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Логический тип данных (<code>bool</code>)</h2>
        <p>
          Логические данные в Python могут иметь только два значения: <code>True</code> (истина) и <code>False</code> (ложь). 
          Они используются для представления булевых условий и состояний в программе, таких как проверки условий и логические операции.
        </p>
        <pre>
          <code>
            {`# Пример использования логического типа данных\n`}
            {`is_student = True\n`}
            {`has_license = False\n`}
            {`is_sunny = True\n`}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Использование переменных</h2>
        <p>
          В программировании переменные используются для хранения данных определенных типов. Они позволяют нам сохранять значения и 
          манипулировать ими в процессе работы программы.
        </p>
        <pre>
          <code>
            {`# Пример использования переменных\n`}
            {`a = 5\n`}
            {`b = 10\n`}
            {`sum = a + b\n`}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Преобразование типов данных</h2>
        <p>
          Иногда в программе может потребоваться изменить тип данных одного значения на другой тип. Например, преобразовать строку в 
          число или наоборот. В Python для этого предусмотрены специальные функции преобразования типов.
        </p>
        <pre>
          <code>
            {`# Пример преобразования типов данных\n`}
            {`str_number = "100"\n`}
            {`int_number = int(str_number)\n`}
            {`float_number = float(str_number)\n\n`}

            {`# Преобразование числа в строку\n`}
            {`number = 50\n`}
            {`str_number = str(number)\n`}
          </code>
        </pre>
      </div>

      <div className="lesson-section">
        <h2>Заключение</h2>
        <p>
          В этом уроке были рассмотрены основные типы данных в Python: целочисленные, вещественные, строковые и логические. 
          Они являются фундаментом для создания любых программ и позволяют нам работать с различными видами данных. Понимание этих 
          основных концепций поможет вам начать понимать, как программы хранят и обрабатывают информацию, и просто необходимы для 
          дальнейшего изучения Python.
        </p>
      </div>
      <ScrollToTopButton /> 
      <div className="lesson-section">
        <h2>Задание</h2>
        <Quiz quiz = {quest} />
      </div>
    </div>
  );
};

export default VariablesAndDataTypes;