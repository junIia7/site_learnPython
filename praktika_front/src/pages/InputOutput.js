import React from 'react';
import '../styles/Lesson-style.css';
import CodeExecutor from '../components/CodeExecutor';
import ScrollToTopButton from '../components/ScrollTopButton';

const InputOutput = () => {

  const content = 
    {
      test: [
        {
          input: "abcdefg",
          expectedOutput: "abcdefg\nabcdefg"
        },
        {
          input: "Hello",
          expectedOutput: "Hello\nHello"
        }
      ],
      taskDescription: "Напишите программу, которая принимает на вход строку и выводит ее на экран 2 раза.",
      taskInputFormat: "Программа принимает одну строку в качестве входных данных. Эта строка может содержать любые символы, включая буквы, цифры, пробелы и специальные символы.",
      taskOutputFormat: "Программа выводит входную строку дважды, каждую строку на новой строке.",
      taskExample: {
        input: "Hello World!",
        output: "Hello World!\nHello World!"
      }
    }
    
  return (
    <div className="lesson-container">
      <div className="lesson-header">
        <h1>Ввод и вывод данных</h1>
      </div>
      <div className="lesson-section">
        <h2>Введение в ввод и вывод данных</h2>
        <p>
          Ввод и вывод данных – это важные аспекты программирования, которые позволяют взаимодействовать с пользователем. 
          В Python существуют простые способы ввода данных с клавиатуры и вывода информации на экран. 
          В этом уроке будут рассмотрены основные методы ввода и вывода данных.
        </p>
      </div>

      <div className="lesson-section">
        <h2>Вывод данных</h2>
        <p>
          Для вывода данных в Python используется функция <code>print()</code>. Эта функция позволяет отображать текст и 
          значения переменных на экране. В ее параметрах через запятую указываются переменные или строки, которые будут выведены.
          Можно выводить строки, числа и результаты выражений.
        </p>
        <pre> 
          <code>
            {`# Пример использования print()\n`}
            {`print("Hello, world!")\n`}
            {`age = 25\n`}
            {`print("Возраст:", age)\n`}
            {`sum = 5 + 3\n`}
            {`print("Сумма 5 и 3 =", sum)\n`}
          </code>
        </pre>
        <p>Вывод:</p>
        <pre>
          <code>
            {`Hello, world!\n`}
            {`Возраст: 25\n`}
            {`Сумма 5 и 3 = 8\n`}
          </code>
        </pre>
        <p>
          В этом примере используется <code>print()</code> для вывода строки "Hello, world!", значения переменной <code>age</code> и 
          результата выражения <code>5 + 3</code>.
        </p>
      </div>

      <div className="lesson-section">
        <h2>Ввод данных</h2>
        <p>
          Для ввода данных в Python используется функция <code>input()</code>. Эта функция позволяет пользователю ввести данные с 
          клавиатуры, которые затем можно сохранить в переменной для дальнейшего использования. <code>input()</code> принимает один 
          необязательный параметр — строку приглашения (prompt), которая отображается перед вводом данных. Этот параметр помогает 
          пользователю понять, какие данные от него ожидаются.
        </p>
        <pre>
          <code>
            {`# Пример использования input()\n`}
            {`name = input()\n`}
            {`print("Привет,", name)\n\n`}

            {`age = input()\n`}
            {`print("Ваш возраст:", age)\n`}
          </code>
        </pre>
        <p>Вывод при вводе имени "Alice" и возраста "25":</p>
        <pre>
          <code>
            {`Входные данные: Alice\n`}
            {`Привет, Alice\n\n`}

            {`Входные данные: 25\n`}
            {`Ваш возраст: 25\n`}
          </code>
        </pre>
        <p>
          В этом примере программа запрашивает у пользователя его имя и возраст с помощью функции <code>input()</code> и выводит их на экран.
        </p>
      </div>

      <div className="lesson-section">
        <h2>Преобразование типов при вводе данных</h2>
        <p>
          Данные, введенные с помощью <code>input()</code>, всегда имеют строковый тип. Если вам нужно работать с числами, необходимо преобразовать введенные данные в нужный числовой тип с помощью функций <code>int()</code> или <code>float()</code>.
        </p>
        <pre>
          <code>
            {`# Пример преобразования типов данных при вводе\n`}
            {`age = input("Введите ваш возраст: ")\n`}
            {`age = int(age)\n`}
            {`print("Ваш возраст через год будет:", age + 1)\n\n`}

            {`height = input("Введите ваш рост в метрах: ")\n`}
            {`height = float(height)\n`}
            {`print("Ваш рост:", height, "метра")\n`}
          </code>
        </pre>
        <p>Вывод при вводе возраста "25" и роста "1.75":</p>
        <pre>
          <code>
            {`Входные данные: 25\n`}
            {`Ваш возраст через год будет: 26\n\n`}
            
            {`Входные данные: 1.75\n`}
            {`Ваш рост: 1.75 метра\n`}
          </code>
        </pre>
        <p>
          В этом примере мы преобразуем введенные пользователем данные в целое число и вещественное число, чтобы затем использовать 
          их в математических операциях.
        </p>
      </div>

      <div className="lesson-section">
        <h2>Заключение</h2>
        <p>
          В этом уроке были рассмотрены основные методы ввода и вывода данных в Python. Разобраны примеры использования
          функций <code>print()</code> и <code>input()</code> для взаимодействия с пользователем, а также преобразовывание типов 
          данных для выполнения математических операций. Понимание этих основ поможет создавать интерактивные программы и 
          работать с данными более эффективно.
        </p>
      </div>
      <ScrollToTopButton /> 
      <div className="lesson-section">
        <CodeExecutor codeExecutor={content} />
      </div>
    </div>
  );
};

export default InputOutput;