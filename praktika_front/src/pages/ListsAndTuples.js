import React from 'react';
import ScrollToTopButton from '../components/ScrollTopButton';

const ListsAndTuples = () => {
  return (
    <div className="lesson-container">
      <header className="lesson-header">
        <h1>Списки и кортежи</h1>
      </header>

      <section className="lesson-section">
        <h2>Определение и различия</h2>
        <p>Список в Python представляет собой упорядоченную изменяемую коллекцию элементов, которая может содержать объекты 
          любых типов, заключённые в квадратные скобки. Например:</p>
        <pre>
          <code>
            {`my_list = [1, 2, 3, 'apple', 'banana']\n`}
            {`print(my_list)  # Вывод: [1, 2, 3, 'apple', 'banana']\n`}
          </code>
        </pre>
        <p>Кортеж в Python представляет собой упорядоченную неизменяемую коллекцию элементов, которая может содержать 
          объекты любых типов, заключённые в круглые скобки. В том числе другие списки. Например:</p>
        <pre>
          <code>
            {`my_tuple = (1, 2, 3, 'apple', 'banana')\n`}
            {`print(my_tuple)  # Вывод: (1, 2, 3, 'apple', 'banana')\n\n`}

            {`my_tuple = ([1, 2], ['apple', 'banana'])\n`}
            {`print(my_tuple)  # Вывод: ([1, 2], ['apple', 'banana'])\n`}
          </code>
        </pre>
        <p>С помощью символа <code>*</code>, указанного перед списком в функции <code>print()</code> можно "распаковать" элементы 
        списка и передать их как отдельные аргументы в функцию. В таком случае функция принимает не один аргумент - список, 
        а несколько - его елементы. Например:</p>
        <pre>
          <code>
            {`my_tuple = (1, 2, 3, 4, 5)\n`}
            {`print(*my_tuple)  # Вывод: 1 2 3 4 5\n`}
          </code>
        </pre>
        <p>Основное различие между списками и кортежами заключается в том, что списки можно изменять (добавлять, удалять элементы)
          , а кортежи являются неизменяемыми после создания. Это делает кортежи более эффективными в использовании, если 
          требуется неизменяемая коллекция данных.</p>
      </section>

      <section className="lesson-section">
        <h2>Операции над списками и кортежами</h2>
        <p>Списки и кортежи поддерживают множество общих операций, таких как доступ к элементам по индексу, срезы (slices), 
          конкатенация и повторение. Например:</p>
        <pre>
          <code>
            {`my_list = [1, 2, 3]\n`}
            {`my_tuple = (4, 5, 6)\n\n`}

            {`print(my_list[0])  # Вывод: 1\n`}
            {`print(my_tuple[1:])  # Вывод: (5, 6)\n\n`}

            {`combined = my_list + list(my_tuple)\n`}
            {`print(combined)  # Вывод: [1, 2, 3, 4, 5, 6]\n\n`}

            {`repeated = my_tuple * 2\n`}
            {`print(repeated)  # Вывод: (4, 5, 6, 4, 5, 6)\n`}
          </code>
        </pre>
        <p>Операции над списками и кортежами позволяют эффективно работать с элементами коллекций в Python.</p>
      </section>

      <section className="lesson-section">
        <h2>Методы списков</h2>
        <p>Списки в Python имеют ряд встроенных методов для удобного управления элементами:</p>
        <ul>
          <li><code>append(element)</code> - добавляет элемент в конец списка.</li>
          <li><code>extend(iterable)</code> - расширяет список, добавляя элементы из итерируемого объекта.</li>
          <li><code>insert(index, element)</code> - вставляет элемент в указанную позицию.</li>
          <li><code>remove(element)</code> - удаляет первое вхождение указанного элемента из списка.</li>
          <li><code>pop(index)</code> - удаляет и возвращает элемент по индексу (по умолчанию последний).</li>
        </ul>
          <p>Эти методы делают списки мощным инструментом для управления коллекциями данных.</p>
      </section>

      <section className="lesson-section">
        <h2>Генераторы списков</h2>
        <p>Генераторы списков (list comprehensions) представляют собой компактный способ создания списков в Python с 
          использованием выражений. Они позволяют быстро и чисто создавать списки на основе итерации и условий. Например:</p>
        <p>Основной синтаксис генератора списка выглядит следующим образом:</p>
        <pre>
          <code>
            {`[выражение for элемент in итерируемый_объект if условие]\n`}
          </code>
        </pre>
        <p>Здесь:</p>
        <ul>
          <li><code>выражение</code> - выражение, которое применяется к каждому элементу.</li>
          <li><code>элемент</code> - текущий элемент из <code>итерируемого_объекта</code>.</li>
          <li><code>итерируемый_объект</code> - объект, по которому происходит итерация (например, список, диапазон).</li>
          <li><code>условие</code> (необязательно) - условие, которое фильтрует элементы.</li>
        </ul>
        <pre>
          <code>
            {`numbers = [1, 2, 3, 4, 5]\n`}
            {`squared_numbers = [x ** 2 for x in numbers]\n`}
            {`print(squared_numbers)  # Вывод: [1, 4, 9, 16, 25]\n\n`}

            {`even_numbers = [x for x in numbers if x % 2 == 0]\n`}
            {`print(even_numbers)  # Вывод: [2, 4]\n`}
          </code>
        </pre>
        <p>Генераторы списков являются эффективным и читаемым способом создания новых списков на основе существующих данных.</p>
      </section>

      <section className="lesson-section">
        <h2>Заключение</h2>
        <p>В этом уроке мы изучили основные концепции и операции, связанные со списками и кортежами в Python.
          Списки и кортежи играют важную роль в программировании, обеспечивая удобство работы с данными и повышая эффективность 
          разработки. Практикуйтесь и экспериментируйте с различными операциями и методами для лучшего усвоения материала.</p>
      </section>
      <ScrollToTopButton /> 
    </div>
  );
};

export default ListsAndTuples;
