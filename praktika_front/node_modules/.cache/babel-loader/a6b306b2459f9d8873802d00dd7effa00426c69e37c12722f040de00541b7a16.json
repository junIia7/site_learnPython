{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kasat\\\\Desktop\\\\praktika_front\\\\src\\\\components\\\\CodeExecutor.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport CodeEditor from './CodeEditor';\nimport '../styles/CodeEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeExecutor = ({\n  codeExecutor\n}) => {\n  _s();\n  const [code, setCode] = useState('');\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [error, setError] = useState('');\n  const [resultMessage, setResultMessage] = useState('');\n  const [input_data, setInputData] = useState('');\n  const [expectedOutput, setExpectedOutput] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // State to track loading state\n\n  const executeCode = async action => {\n    setIsLoading(true); // Set loading state to true when starting execution\n    const file = codeExecutor.file;\n    try {\n      const response = await axios.post('http://localhost:5000/execute', {\n        code,\n        input,\n        file,\n        action\n      });\n      setOutput(response.data.output);\n      setError(response.data.error);\n      setResultMessage(response.data.resultMessage);\n      setInputData(response.data.inputData);\n      setExpectedOutput(response.data.expectedOutput);\n    } catch (err) {\n      console.log(err);\n      setError('Error executing code.');\n    } finally {\n      setIsLoading(false); // Set loading state to false when request completes (whether success or error)\n    }\n  };\n\n  // return (\n  //   <div className=\"editor-container\">\n  //     <CodeEditor code={code} setCode={setCode} input={input} setInput={setInput} />\n\n  //     <div className=\"editor-buttons\">\n  //       <button\n  //         disabled={isLoading} \n  //         onClick={() => executeCode('')} \n  //         className={isLoading ? 'button-loading' : ''}>\n  //       Запустить код</button>\n  //       {file !== \"0\" && (\n  //         <button \n  //           style={{ marginLeft: '20px' }}\n  //           disabled={isLoading} \n  //           onClick={() => executeCode('run')} \n  //           className={isLoading ? 'button-loading' : ''}>\n  //           Отправить на проверку\n  //         </button>\n  //       )}\n  //     </div>\n\n  //     <div className=\"editor-result\">\n  //       {resultMessage &&\n  //         <h2 style = {{borderBottom: \"2px solid #282c34\"}} >{resultMessage}</h2>\n  //       }\n\n  //       {error && (\n  //         <div>\n  //           <h3>Ошибка:</h3>\n  //           <pre>{error}</pre>\n  //         </div>\n  //       )}\n\n  //       <h3>Входные данные:</h3>\n  //       <pre>{input_data}</pre>\n\n  //       <h3>Ваш вывод:</h3>\n  //       <pre>{output}</pre>\n\n  //       {expectedOutput && \n  //         <div>\n  //           <h3>Ожидаемый вывод:</h3>\n  //           <pre>{expectedOutput}</pre>\n  //         </div>\n  //       }\n  //     </div>\n  //   </div>\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-executor\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: codeExecutor.taskDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Input Format:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }, this), \" \", codeExecutor.taskInputFormat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Output Format:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 10\n      }, this), \" \", codeExecutor.taskOutputFormat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Example:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Input: \", codeExecutor.taskExample.input]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Output: \", codeExecutor.taskExample.output]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Tests:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), codeExecutor.tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"Input: \", test.input]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"Expected Output: \", test.expectedOutput]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeExecutor, \"VjTR6bnyHZe9eZBjtA16sF9v3QM=\");\n_c = CodeExecutor;\nexport default CodeExecutor;\nvar _c;\n$RefreshReg$(_c, \"CodeExecutor\");","map":{"version":3,"names":["React","useState","axios","CodeEditor","jsxDEV","_jsxDEV","CodeExecutor","codeExecutor","_s","code","setCode","input","setInput","output","setOutput","error","setError","resultMessage","setResultMessage","input_data","setInputData","expectedOutput","setExpectedOutput","isLoading","setIsLoading","executeCode","action","file","response","post","data","inputData","err","console","log","className","children","taskDescription","fileName","_jsxFileName","lineNumber","columnNumber","taskInputFormat","taskOutputFormat","taskExample","tests","map","test","index","_c","$RefreshReg$"],"sources":["C:/Users/kasat/Desktop/praktika_front/src/components/CodeExecutor.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport CodeEditor from './CodeEditor';\r\nimport '../styles/CodeEditor.css';\r\n\r\n\r\nconst CodeExecutor = ({codeExecutor}) => {\r\n  const [code, setCode] = useState('');\r\n  const [input, setInput] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [resultMessage, setResultMessage] = useState('');\r\n  const [input_data, setInputData] = useState('');\r\n  const [expectedOutput, setExpectedOutput] = useState('');\r\n\r\n  const [isLoading, setIsLoading] = useState(false); // State to track loading state\r\n\r\n  const executeCode = async (action) => {\r\n    setIsLoading(true); // Set loading state to true when starting execution\r\n    const file = codeExecutor.file\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/execute', { code, input, file, action });\r\n      setOutput(response.data.output);\r\n      setError(response.data.error);\r\n      setResultMessage(response.data.resultMessage);\r\n      setInputData(response.data.inputData);\r\n      setExpectedOutput(response.data.expectedOutput);\r\n    } catch (err) {\r\n      console.log(err)\r\n      setError('Error executing code.');\r\n    } finally {\r\n      setIsLoading(false); // Set loading state to false when request completes (whether success or error)\r\n    }\r\n  };\r\n\r\n  // return (\r\n  //   <div className=\"editor-container\">\r\n  //     <CodeEditor code={code} setCode={setCode} input={input} setInput={setInput} />\r\n      \r\n  //     <div className=\"editor-buttons\">\r\n  //       <button\r\n  //         disabled={isLoading} \r\n  //         onClick={() => executeCode('')} \r\n  //         className={isLoading ? 'button-loading' : ''}>\r\n  //       Запустить код</button>\r\n  //       {file !== \"0\" && (\r\n  //         <button \r\n  //           style={{ marginLeft: '20px' }}\r\n  //           disabled={isLoading} \r\n  //           onClick={() => executeCode('run')} \r\n  //           className={isLoading ? 'button-loading' : ''}>\r\n  //           Отправить на проверку\r\n  //         </button>\r\n  //       )}\r\n  //     </div>\r\n\r\n  //     <div className=\"editor-result\">\r\n  //       {resultMessage &&\r\n  //         <h2 style = {{borderBottom: \"2px solid #282c34\"}} >{resultMessage}</h2>\r\n  //       }\r\n\r\n  //       {error && (\r\n  //         <div>\r\n  //           <h3>Ошибка:</h3>\r\n  //           <pre>{error}</pre>\r\n  //         </div>\r\n  //       )}\r\n\r\n  //       <h3>Входные данные:</h3>\r\n  //       <pre>{input_data}</pre>\r\n\r\n  //       <h3>Ваш вывод:</h3>\r\n  //       <pre>{output}</pre>\r\n\r\n  //       {expectedOutput && \r\n  //         <div>\r\n  //           <h3>Ожидаемый вывод:</h3>\r\n  //           <pre>{expectedOutput}</pre>\r\n  //         </div>\r\n  //       }\r\n  //     </div>\r\n  //   </div>\r\n  return (\r\n    <div className='code-executor'>\r\n      <h2>{codeExecutor.taskDescription}</h2>\r\n      <p><strong>Input Format:</strong> {codeExecutor.taskInputFormat}</p>\r\n      <p><strong>Output Format:</strong> {codeExecutor.taskOutputFormat}</p>\r\n      <div>\r\n        <h3>Example:</h3>\r\n        <pre>Input: {codeExecutor.taskExample.input}</pre>\r\n        <pre>Output: {codeExecutor.taskExample.output}</pre>\r\n      </div>\r\n      <div>\r\n        <h3>Tests:</h3>\r\n        {codeExecutor.tests.map((test, index) => (\r\n          <div key={index}>\r\n            <pre>Input: {test.input}</pre>\r\n            <pre>Expected Output: {test.expectedOutput}</pre>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeExecutor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}